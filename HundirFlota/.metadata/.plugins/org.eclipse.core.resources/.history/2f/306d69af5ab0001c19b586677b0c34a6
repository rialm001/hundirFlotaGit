package vistaHF;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import java.awt.Font;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import modeloHF.GestorHF;
import vistaHF.vistaPrincipal.Controlador;


@SuppressWarnings("deprecation")
public class vistaTablero extends JFrame implements Observer {

	/**
	 * 
	 */
	private static final long serialVersionUID = 5388845059595950403L;
	private JPanel contentPane;
	private JPanel panelCENTRO;
	private JPanel panelARRIBA;
	private JPanel panelIZQUIERDA;
	private JLabel lblJUG;
	private JLabel lblPC;
	private JPanel panelPC;
	private JPanel panelJUG;
	private JPanel panelABAJO;
	private JPanel panelFLOTA;
	private JPanel panelINFOJUG;
	private JPanel panelARMAMENTO;
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JLabel lblNewLabel_5;
	private JLabel lblNewLabel_6;
	private int X,Y;
	private ArrayList <JLabel > lista = new ArrayList <JLabel>() ;
	private Controlador controlador = null;


	private void centrarPantalla()
	{
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		Dimension frameSize = getSize(); //Tamaño del frame actual (ancho x alto)
		if (frameSize.height > screenSize.height) {
			frameSize.height = screenSize.height;
		}
		if (frameSize.width > screenSize.width) {
			frameSize.width = screenSize.width;
		}
		setLocation((screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2);	
	}
	
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					vistaTablero frame = new vistaTablero();
					frame.setVisible(true);
					frame.centrarPantalla();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public vistaTablero() {
		setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		setBounds(100, 100, 1000, 700);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(new BorderLayout(0, 0));
		contentPane.add(getPanelCENTRO(), BorderLayout.CENTER);
		contentPane.add(getPanelARRIBA(), BorderLayout.NORTH);
		contentPane.add(getPanelIZQUIERDA(), BorderLayout.EAST);
		contentPane.add(getPanel_2(), BorderLayout.SOUTH);
		this.crearTablero(panelJUG);
		this.crearTablero(panelPC);
		GestorHF.getGestorHF().addObserver(this);
	}
	private JPanel getPanelCENTRO() {
		if (panelCENTRO == null) {
			panelCENTRO = new JPanel();
			panelCENTRO.setLayout(new GridLayout(1, 0, 0, 0));
			panelCENTRO.add(getPanelJUG());
			panelCENTRO.add(getPanelPC());
		}
		return panelCENTRO;
	}
	private JPanel getPanelARRIBA() {
		if (panelARRIBA == null) {
			panelARRIBA = new JPanel();
			panelARRIBA.setLayout(new GridLayout(1, 0, 0, 0));
			panelARRIBA.add(getLblJUG());
			panelARRIBA.add(getLblPC());
		}
		return panelARRIBA;
	}
	private JPanel getPanelIZQUIERDA() {
		if (panelIZQUIERDA == null) {
			panelIZQUIERDA = new JPanel();
		}
		return panelIZQUIERDA;
	}
	private JLabel getLblJUG() {
		if (lblJUG == null) {
			lblJUG = new JLabel("TABLERO JUGADOR");
			lblJUG.setForeground(Color.BLUE);
			lblJUG.setFont(new Font("Tahoma", Font.BOLD, 12));
			lblJUG.setHorizontalAlignment(SwingConstants.CENTER);
		}
		return lblJUG;
	}
	private JLabel getLblPC() {
		if (lblPC == null) {
			lblPC = new JLabel("TABLERO CONTRINCANTE");
			lblPC.setForeground(Color.BLUE);
			lblPC.setFont(new Font("Tahoma", Font.BOLD, 12));
			lblPC.setHorizontalAlignment(SwingConstants.CENTER);
		}
		return lblPC;
	}
	private JPanel getPanelPC() {
		if (panelPC == null) {
			panelPC = new JPanel();
		}
		return panelPC;
	}
	private JPanel getPanelJUG() {
		if (panelJUG == null) {
			panelJUG = new JPanel();
		}
		return panelJUG;
	}
	private JPanel getPanel_2() {
		if (panelABAJO == null) {
			panelABAJO = new JPanel();
			panelABAJO.setLayout(new GridLayout(0, 3, 0, 0));
			panelABAJO.add(getPanel_1_1());
			panelABAJO.add(getPanel_2_1());
			panelABAJO.add(getPanel_3());
		}
		return panelABAJO;
	}
	private JPanel getPanel_1_1() {
		if (panelFLOTA == null) {
			panelFLOTA = new JPanel();
			panelFLOTA.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
			panelFLOTA.add(getLblNewLabel());
			panelFLOTA.add(getLblNewLabel_1());
			panelFLOTA.add(getLblNewLabel_2());
			panelFLOTA.add(getLblNewLabel_3());
			panelFLOTA.add(getLblNewLabel_4());
			panelFLOTA.add(getLblNewLabel_5());
			panelFLOTA.add(getLblNewLabel_6());
		}
		return panelFLOTA;
	}
	private JPanel getPanel_2_1() {
		if (panelINFOJUG == null) {
			panelINFOJUG = new JPanel();
		}
		return panelINFOJUG;
	}
	private JPanel getPanel_3() {
		if (panelARMAMENTO == null) {
			panelARMAMENTO = new JPanel();
		}
		return panelARMAMENTO;
	}
	private JLabel getLblNewLabel() {
		if (lblNewLabel == null) {
			lblNewLabel = new JLabel("New label");
		}
		return lblNewLabel;
	}
	private JLabel getLblNewLabel_1() {
		if (lblNewLabel_1 == null) {
			lblNewLabel_1 = new JLabel("New label");
		}
		return lblNewLabel_1;
	}
	private JLabel getLblNewLabel_2() {
		if (lblNewLabel_2 == null) {
			lblNewLabel_2 = new JLabel("New label");
		}
		return lblNewLabel_2;
	}
	private JLabel getLblNewLabel_3() {
		if (lblNewLabel_3 == null) {
			lblNewLabel_3 = new JLabel("New label");
		}
		return lblNewLabel_3;
	}
	private JLabel getLblNewLabel_4() {
		if (lblNewLabel_4 == null) {
			lblNewLabel_4 = new JLabel("New label");
		}
		return lblNewLabel_4;
	}
	private JLabel getLblNewLabel_5() {
		if (lblNewLabel_5 == null) {
			lblNewLabel_5 = new JLabel("New label");
		}
		return lblNewLabel_5;
	}
	private JLabel getLblNewLabel_6() {
		if (lblNewLabel_6 == null) {
			lblNewLabel_6 = new JLabel("New label");
		}
		return lblNewLabel_6;
	}
	
	private JLabel cbt3() 
	{ //parámetros de entrada 
		
		JLabel btn = new JLabel(); //texto del botón
		btn.setBorder(BorderFactory.createLineBorder(Color.WHITE));
		btn.setOpaque(true);
		btn.setBackground(Color.darkGray);
		return btn; 
	}
	
	public void crearTablero(JPanel panel) {
		int i,j;
		int count = 1;
	
		//cremos el tablero con las casillas(0-24)
		for(i=0; i<10;i++) {
			for(j=0; j<10;j++) {
				//coordenadas
				int  Xx = i; 
				int  Yy = j;				
			
				//creamos el JLabel
				JLabel btt = cbt3();
											
				//añadimos JLabel al array;
				lista.add(btt);
				
				//accion al hacer clic
				 btt.addMouseListener(new MouseAdapter() {
						@Override
						public void mouseClicked(MouseEvent e) {
							
							//ponemos las coordenadas del tablero en el label coordenadas
							coordenadas.setText("X: "+Xx + "  Y: " +Yy);
							
							X =Xx;
							Y = Yy;
												
							//cogemos el label clicado 
							JLabel labelClicado = (JLabel) e.getComponent();
							
							/*//conseguimos la coordenada del label clicado
							int coord = lista.indexOf(labelClicado);
							System.out.println("posicion array : " +coord);*/
														
				 }
					});
				panel.setLayout(new GridLayout(10, 10, 0, 0));
				panel.add(btt, BorderLayout.CENTER);
			}
		}
}

	//1- CONTROLADOR : instancia	
			private Controlador getControlador() {
				if (controlador == null) {
					controlador = new Controlador();
				}
				return controlador;
			}
			//2- CONTROLADOR : listener
			private class Controlador implements ActionListener {
				//Tras pulsar el botÃ³n, abre una nueva pantalla
				public void actionPerformed(ActionEvent e) {
						
					GestorHF.getGestorHF().tablero();
				}
			}
			@Override
			public void update(Observable o, Object arg) {
				// TODO Esbozo de método generado automáticamente
				
			}

	}

